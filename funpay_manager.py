import time
import random
import requests
from bs4 import BeautifulSoup
from config import Config
import logging

class FunPayManager:
    def __init__(self):
        self.base_url = Config.FUNPAY_BASE_URL
        self.login = Config.FUNPAY_LOGIN
        self.password = Config.FUNPAY_PASSWORD
        self.session = requests.Session()
        self.is_logged_in = False
    
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
    
    def login_to_funpay(self):
        """–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç FunPay —á–µ—Ä–µ–∑ API"""
        try:
            self.logger.info("üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ FunPay...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
            login_page = self.session.get(f"{self.base_url}/account/login")
            soup = BeautifulSoup(login_page.content, 'html.parser')
            
            # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω
            csrf_token = None
            csrf_input = soup.find('input', {'name': '_token'})
            if csrf_input:
                csrf_token = csrf_input.get('value')
            
            if not csrf_token:
                self.logger.warning("‚ö†Ô∏è CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
            login_data = {
                'login': self.login,
                'password': self.password,
            }
            
            if csrf_token:
                login_data['_token'] = csrf_token
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
            response = self.session.post(
                f"{self.base_url}/account/login",
                data=login_data,
                allow_redirects=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            if response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                if 'account' in response.url or 'profile' in response.url:
                    self.is_logged_in = True
                    self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ FunPay")
                    return True
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
                    soup = BeautifulSoup(response.content, 'html.parser')
                    if soup.find('a', {'href': '/account/logout'}) or soup.find('div', {'class': 'user-menu'}):
                        self.is_logged_in = True
                        self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ FunPay (–ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã)")
            return True
            
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ FunPay")
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ FunPay: {e}")
            return False
    
    def get_orders(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return []
            
            self.logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
            
            response = self.session.get(f"{self.base_url}/account/orders")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {response.status_code}")
                return []
            
            soup = BeautifulSoup(response.content, 'html.parser')
            orders = []
            
            # –ü–∞—Ä—Å–∏–º –∑–∞–∫–∞–∑—ã
            order_elements = soup.find_all('div', {'class': 'order-item'})
            
            for order_elem in order_elements:
                try:
                    order = {
                        'id': order_elem.get('data-order-id', ''),
                        'title': order_elem.find('div', {'class': 'order-title'}).text.strip(),
                        'status': order_elem.find('div', {'class': 'order-status'}).text.strip(),
                        'price': order_elem.find('div', {'class': 'order-price'}).text.strip(),
                        'date': order_elem.find('div', {'class': 'order-date'}).text.strip()
                    }
                    orders.append(order)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–∞: {e}")
                    continue
            
            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
            return orders
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    def get_reviews(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return []
            
            self.logger.info("‚≠ê –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...")
            
            response = self.session.get(f"{self.base_url}/account/reviews")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {response.status_code}")
                return []
            
            soup = BeautifulSoup(response.content, 'html.parser')
            reviews = []
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤—ã
            review_elements = soup.find_all('div', {'class': 'review-item'})
            
            for review_elem in review_elements:
                try:
                    review = {
                        'id': review_elem.get('data-review-id', ''),
                        'order_id': review_elem.get('data-order-id', ''),
                        'rating': int(review_elem.find('div', {'class': 'rating'}).get('data-rating', 0)),
                        'comment': review_elem.find('div', {'class': 'comment'}).text.strip(),
                        'date': review_elem.find('div', {'class': 'review-date'}).text.strip()
                    }
                    reviews.append(review)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–∞: {e}")
                    continue
            
            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")
            return reviews
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return []
    
    def send_message(self, order_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∑–∞–∫–∞–∑–∞"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return False
            
            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞ –∑–∞–∫–∞–∑–∞
            response = self.session.get(f"{self.base_url}/account/orders/{order_id}/chat")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {response.status_code}")
                return False
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º —Ñ–æ—Ä–º—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            form = soup.find('form', {'action': lambda x: x and 'send' in x})
            if not form:
                self.logger.error("‚ùå –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
            csrf_token = None
            csrf_input = form.find('input', {'name': '_token'})
            if csrf_input:
                csrf_token = csrf_input.get('value')
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_data = {
                'message': message,
                'order_id': order_id
            }
            
            if csrf_token:
                send_data['_token'] = csrf_token
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = self.session.post(
                form.get('action'),
                data=send_data,
                allow_redirects=True
            )
            
            if response.status_code == 200:
                self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def update_listing(self, listing_id: str, data: dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ FunPay"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return False
            
            self.logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            response = self.session.get(f"{self.base_url}/account/listings/{listing_id}/edit")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
                return False
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            form = soup.find('form', {'action': lambda x: x and 'update' in x})
            if not form:
                self.logger.error("‚ùå –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
            csrf_token = None
            csrf_input = form.find('input', {'name': '_token'})
            if csrf_input:
                csrf_token = csrf_input.get('value')
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = data.copy()
            if csrf_token:
                update_data['_token'] = csrf_token
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            response = self.session.post(
                form.get('action'),
                data=update_data,
                allow_redirects=True
            )
            
            if response.status_code == 200:
                self.logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def delete_listing(self, listing_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return False
            
            self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–¥–∞–ª–µ–Ω–∏—è
            response = self.session.get(f"{self.base_url}/account/sells/delete/{listing_id}")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
                return False
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω
            csrf_token = None
            csrf_input = soup.find('input', {'name': '_token'})
            if csrf_input:
                csrf_token = csrf_input.get('value')
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            delete_data = {}
            if csrf_token:
                delete_data['_token'] = csrf_token
            
            # –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            response = self.session.post(
                f"{self.base_url}/account/sells/delete/{listing_id}",
                data=delete_data,
                allow_redirects=True
            )
            
            if response.status_code == 200:
                self.logger.info("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {response.status_code}")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def sync_with_funpay(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å FunPay"""
        try:
            self.logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å FunPay...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
            orders = self.get_orders()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
            reviews = self.get_reviews()
            
            self.logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–∫–∞–∑–æ–≤: {len(orders)}, –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")
            
            return {
                'orders': orders,
                'reviews': reviews,
                'success': True
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å FunPay: {e}")
            return {
                'orders': [],
                'reviews': [],
                'success': False,
                'error': str(e)
            }
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            self.session.close()
            self.logger.info("üîí –°–µ—Å—Å–∏—è FunPay –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {e}")

    def check_new_orders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return []
            self.logger.info("üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
            orders = self.get_orders()
            new_orders = []
            for order in orders:
                if order.get('status', '').lower() in ['new', 'pending', '–Ω–æ–≤—ã–π', '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ']:
                    game_name = self.extract_game_from_order(order)
                    if game_name:
                        order['game_name'] = game_name
                        new_orders.append(order)
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            return new_orders
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    def extract_game_from_order(self, order: dict) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞"""
        try:
            title = order.get('title', '').lower()
            game_mapping = {
                'cs2': 'Counter-Strike 2', 'cs:go': 'Counter-Strike 2', 'counter-strike': 'Counter-Strike 2',
                'dota': 'Dota 2', 'dota 2': 'Dota 2', 'pubg': 'PUBG', 'playerunknown': 'PUBG',
                'valorant': 'Valorant', 'lol': 'League of Legends', 'league of legends': 'League of Legends',
                'fortnite': 'Fortnite', 'minecraft': 'Minecraft', 'gta': 'GTA V', 'grand theft auto': 'GTA V',
                'fifa': 'FIFA 24', 'cod': 'Call of Duty', 'call of duty': 'Call of Duty',
                'overwatch': 'Overwatch', 'apex': 'Apex Legends', 'apex legends': 'Apex Legends'
            }
            for keyword, game_name in game_mapping.items():
                if keyword in title:
                    self.logger.info(f"üéÆ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–≥—Ä–∞: {game_name} –∏–∑ –∑–∞–∫–∞–∑–∞ '{order.get('title', '')}'")
                    return game_name
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä—É –∏–∑ –∑–∞–∫–∞–∑–∞: {order.get('title', '')}")
            return 'Unknown Game'
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–≥—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞: {e}")
            return 'Unknown Game'
    
    def process_order(self, order_id: str, account_data: dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            response = self.session.get(f"{self.base_url}/account/orders/{order_id}")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–∞: {response.status_code}")
                return False
            soup = BeautifulSoup(response.content, 'html.parser')
            form = soup.find('form', {'action': lambda x: x and 'send' in x})
            if not form:
                self.logger.error("‚ùå –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            csrf_token = None
            csrf_input = form.find('input', {'name': '_token'})
            if csrf_input:
                csrf_token = csrf_input.get('value')
            message = f"""
üéÆ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∏–≥—Ä—ã {account_data['game_name']}

üë§ –õ–æ–≥–∏–Ω: {account_data['username']}
üîë –ü–∞—Ä–æ–ª—å: {account_data['password']}
‚è∞ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: {account_data['duration']} —á–∞—Å–æ–≤
üïê –ù–∞—á–∞–ª–æ: {account_data['start_time']}

üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –í–æ–π–¥–∏—Ç–µ –≤ Steam
2. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
3. –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Steam Guard –∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
4. –ù–µ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä

‚≠ê –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ 5 –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è +30 –º–∏–Ω—É—Ç –±–æ–Ω—É—Å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!

üÜò –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
            """.strip()
            send_data = {
                'message': message,
                'order_id': order_id
            }
            if csrf_token:
                send_data['_token'] = csrf_token
            response = self.session.post(
                form.get('action'),
                data=send_data,
                allow_redirects=True
            )
            if response.status_code == 200:
                self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            return False
    
    def check_reviews(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return []
            self.logger.info("‚≠ê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...")
            reviews = self.get_reviews()
            new_reviews = []
            for review in reviews:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –Ω–æ–≤—ã–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
                new_reviews.append(review)
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_reviews)} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
            return new_reviews
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return []
