#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ Telegram –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞—Ä–µ–Ω–¥—ã Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import Config
from database import Database

class SteamRentalBot:
    def __init__(self):
        self.token = Config.TELEGRAM_TOKEN
        self.admin_id = Config.TELEGRAM_ADMIN_ID
        self.db = Database()
        self.application = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
        )
        self.logger = logging.getLogger(__name__)
        
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        self.logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞...")
        self.logger.info(f"üîë Token: {self.token[:20] if self.token else '–ù–ï –ù–ê–ô–î–ï–ù'}...")
        self.logger.info(f"üë§ Admin ID: {self.admin_id}")
        
        if not self.token:
            self.logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            self.logger.error(f"   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {self.token}")
            return False
            
        try:
            self.application = Application.builder().token(self.token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("accounts", self.accounts_command))
            self.application.add_handler(CommandHandler("rentals", self.rentals_command))
            self.application.add_handler(CommandHandler("support", self.support_command))
            self.application.add_handler(CommandHandler("admin", self.admin_command))
            self.application.add_handler(CommandHandler("add_account", self.add_account_command))
            self.application.add_handler(CommandHandler("edit_account", self.edit_account_command))
            self.application.add_handler(CommandHandler("set_token", self.set_token_command))
            self.application.add_handler(CommandHandler("tokens", self.tokens_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.button_callback))
            
            self.logger.info("‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.application:
            self.logger.error("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
            
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ signal handling
            async def run_bot():
                async with self.application:
                    await self.application.start_polling(
                        allowed_updates=Update.ALL_TYPES,
                        drop_pending_updates=True
                    )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            loop.run_until_complete(run_bot())
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            telegram_id=str(user.id),
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        welcome_text = f"""
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Steam Rental System!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã Steam –¥–ª—è –∏–≥—Ä.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/accounts - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
/rentals - –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞
/help - –°–ø—Ä–∞–≤–∫–∞

üí° –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="show_accounts")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã", callback_data="show_rentals")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="show_status")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/accounts - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
/rentals - –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

üîß –ö–∞–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /accounts
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
3. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã
4. –û–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É
5. –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –ø–∞—Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä
‚Ä¢ –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: /support
        """
        await update.message.reply_text(help_text)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            total_accounts = self.db.get_total_accounts()
            available_accounts = self.db.get_available_accounts()
            active_rentals = self.db.get_active_rentals()
            
            status_text = f"""
üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {available_accounts}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {active_rentals}

üîß –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞
        """
            
        except Exception as e:
            status_text = f"""
‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support
            """
        
        await update.message.reply_text(status_text)
    
    async def accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /accounts"""
        try:
            accounts = self.db.get_available_accounts_list()
            
            if not accounts:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
                return
            
            text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n"
            keyboard = []
            
            for i, account in enumerate(accounts[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                text += f"üéÆ –ê–∫–∫–∞—É–Ω—Ç #{account['id']}\n"
                text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {account.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                text += f"üí∞ –¶–µ–Ω–∞: {account.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±/—á–∞—Å\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å #{account['id']}", 
                    callback_data=f"rent_account_{account['id']}"
                )])
            
            if len(accounts) > 10:
                text += f"... –∏ –µ—â–µ {len(accounts) - 10} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
    
    async def rentals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rentals"""
        user_id = update.effective_user.id
        
        try:
            rentals = self.db.get_user_rentals(user_id)
            
            if not rentals:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.")
                return
            
            text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:\n\n"
            
            for rental in rentals:
                end_time = datetime.fromisoformat(rental['end_time'])
                remaining = end_time - datetime.now()
                
                if remaining.total_seconds() > 0:
                    hours = int(remaining.total_seconds() // 3600)
                    minutes = int((remaining.total_seconds() % 3600) // 60)
                    
                    text += f"üéÆ –ê–∫–∫–∞—É–Ω—Ç #{rental['account_id']}\n"
                    text += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º\n"
                    text += f"üïê –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {end_time.strftime('%Y-%m-%d %H:%M')}\n\n"
                else:
                    text += f"üéÆ –ê–∫–∫–∞—É–Ω—Ç #{rental['account_id']} - –ò—Å—Ç–µ–∫\n\n"
            
            await update.message.reply_text(text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä–µ–Ω–¥: {e}")
    
    async def support_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
        support_text = """
üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @admin
üìß Email: support@steamrental.com
üí¨ –ß–∞—Ç: @steamrental_support

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7

üîß –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Ä–µ–Ω–¥–∞? - –í—Ä–µ–º—è –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ß—Ç–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è? - –ü–∞—Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å? - –î–∞, –æ–ø–ª–∞—Ç–∏–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏? - –î–∞, –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
        """
        await update.message.reply_text(support_text)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        admin_text = """
üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /admin_accounts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
‚Ä¢ /admin_rentals - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–∞–º–∏
‚Ä¢ /admin_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        """
        
        try:
            total_accounts = self.db.get_total_accounts()
            available_accounts = self.db.get_available_accounts()
            active_rentals = self.db.get_active_rentals()
            total_users = self.db.get_total_users()
            
            admin_text += f"""
‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available_accounts}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {active_rentals}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
            """
        except Exception as e:
            admin_text += f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üéÆ –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="admin_accounts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(admin_text, reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "show_accounts":
            await self.accounts_command(update, context)
        elif data == "show_status":
            await self.status_command(update, context)
        elif data == "show_help":
            await self.help_command(update, context)
        elif data.startswith("rent_account_"):
            account_id = data.split("_")[2]
            await self.handle_rent_request(update, context, account_id)
        elif data.startswith("rent_time_"):
            parts = data.split("_")
            account_id = parts[2]
            duration = int(parts[3])
            await self.handle_rent_confirmation(update, context, account_id, duration)
        elif data == "admin_stats":
            await self.admin_stats(update, context)
        elif data == "admin_users":
            await self.admin_users(update, context)
        elif data == "admin_accounts":
            await self.admin_accounts(update, context)
        elif data == "admin_list_accounts":
            await self.admin_list_accounts(update, context)
        elif data == "admin_delete_account":
            await self.admin_delete_account(update, context)
        elif data.startswith("delete_account_"):
            account_id = data.split("_")[2]
            await self.confirm_delete_account(update, context, account_id)
        elif data.startswith("confirm_delete_"):
            account_id = data.split("_")[2]
            await self.execute_delete_account(update, context, account_id)
        elif data == "show_rentals":
            await self.rentals_command(update, context)
        elif data == "admin_back":
            await self.admin_command(update, context)
    
    async def handle_rent_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE, account_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É"""
        user_id = update.effective_user.id
        
        try:
            account = self.db.get_account(account_id)
            if not account:
                await update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            text = f"""
üéÆ –ê—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ #{account_id}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {account.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}
üí∞ –¶–µ–Ω–∞: {account.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±/—á–∞—Å

‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã:
            """
            
            keyboard = [
                [InlineKeyboardButton("1 —á–∞—Å", callback_data=f"rent_time_{account_id}_1")],
                [InlineKeyboardButton("3 —á–∞—Å–∞", callback_data=f"rent_time_{account_id}_3")],
                [InlineKeyboardButton("6 —á–∞—Å–æ–≤", callback_data=f"rent_time_{account_id}_6")],
                [InlineKeyboardButton("12 —á–∞—Å–æ–≤", callback_data=f"rent_time_{account_id}_12")],
                [InlineKeyboardButton("24 —á–∞—Å–∞", callback_data=f"rent_time_{account_id}_24")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="show_accounts")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def handle_rent_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, account_id: str, duration: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã"""
        user_id = update.effective_user.id
        
        try:
            account = self.db.get_account(account_id)
            if not account:
                await update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä–µ–Ω–¥—É
            success = self.db.create_rental(int(account_id), str(user_id), duration)
            
            if success:
                total_cost = duration * account.get('price', 50)
                
                text = f"""
‚úÖ –ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üéÆ –ê–∫–∫–∞—É–Ω—Ç: #{account_id}
üìù –ò–≥—Ä–∞: {account['game_name']}
‚è∞ –í—Ä–µ–º—è: {duration} —á–∞—Å–æ–≤
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±

üìã –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:
üë§ –õ–æ–≥–∏–Ω: {account['username']}
üîë –ü–∞—Ä–æ–ª—å: (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ)

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ù–µ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑–µ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä

‚è∞ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {duration} —á–∞—Å–æ–≤
                """
                
                keyboard = [
                    [InlineKeyboardButton("üìã –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã", callback_data="show_rentals")],
                    [InlineKeyboardButton("üéÆ –ï—â–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="show_accounts")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä–µ–Ω–¥—É. –ê–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –∑–∞–Ω—è—Ç.")
                
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã: {e}")
    
    async def admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        try:
            stats = self.db.get_detailed_stats()
            
            text = """
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üéÆ –ê–∫–∫–∞—É–Ω—Ç—ã:
‚Ä¢ –í—Å–µ–≥–æ: {total_accounts}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available_accounts}
‚Ä¢ –í –∞—Ä–µ–Ω–¥–µ: {rented_accounts}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {blocked_accounts}

üìà –ê—Ä–µ–Ω–¥—ã:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_rentals}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {completed_today}
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue} —Ä—É–±

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_users_today}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_users_today}
            """.format(**stats)
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def admin_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        try:
            users = self.db.get_users_list()
            
            text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            
            for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                text += f"üë§ ID: {user['user_id']}\n"
                text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at']}\n"
                text += f"üéÆ –ê—Ä–µ–Ω–¥: {user['rentals_count']}\n\n"
            
            if len(users) > 10:
                text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}"
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def admin_accounts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        text = """
üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="admin_add_account")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="admin_list_accounts")],
            [InlineKeyboardButton("üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_edit_accounts")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def admin_list_accounts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        try:
            accounts = self.db.get_all_accounts()
            
            if not accounts:
                text = "üì≠ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ."
            else:
                text = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
                
                for account in accounts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    status = "üî¥ –í –∞—Ä–µ–Ω–¥–µ" if account['is_rented'] else "üü¢ –°–≤–æ–±–æ–¥–µ–Ω"
                    text += f"üéÆ #{account['id']} - {account['username']}\n"
                    text += f"üìù –ò–≥—Ä–∞: {account['game_name']}\n"
                    text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                    text += f"üìÖ –°–æ–∑–¥–∞–Ω: {account['created_at']}\n\n"
                
                if len(accounts) > 10:
                    text += f"... –∏ –µ—â–µ {len(accounts) - 10} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}"
        
        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="admin_delete_account")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_accounts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def admin_delete_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        try:
            accounts = self.db.get_all_accounts()
            available_accounts = [acc for acc in accounts if not acc['is_rented']]
            
            if not available_accounts:
                text = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n–ê–∫–∫–∞—É–Ω—Ç—ã –≤ –∞—Ä–µ–Ω–¥–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å."
            else:
                text = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
                keyboard = []
                
                for account in available_accounts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    text += f"üéÆ #{account['id']} - {account['username']}\n"
                    text += f"üìù –ò–≥—Ä–∞: {account['game_name']}\n\n"
                    
                    keyboard.append([InlineKeyboardButton(
                        f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{account['id']}", 
                        callback_data=f"delete_account_{account['id']}"
                    )])
                
                if len(available_accounts) > 10:
                    text += f"... –∏ –µ—â–µ {len(available_accounts) - 10} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}"
            keyboard = []
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_list_accounts")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def confirm_delete_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE, account_id: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        try:
            account = self.db.get_account(account_id)
            if not account:
                await update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            text = f"""
‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è

üéÆ –ê–∫–∫–∞—É–Ω—Ç: #{account_id}
üë§ –õ–æ–≥–∏–Ω: {account['username']}
üìù –ò–≥—Ä–∞: {account['game_name']}

‚ùóÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
            
–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç?
            """
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{account_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_account")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def execute_delete_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE, account_id: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        try:
            success = self.db.delete_account(int(account_id))
            
            if success:
                text = f"""
‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!

üéÆ ID: #{account_id}

–ê–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
                """
            else:
                text = """
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥–µ
‚Ä¢ –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                """
            
            keyboard = [
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="admin_list_accounts")],
                [InlineKeyboardButton("¬´ –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    async def admin_add_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        text = """
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/add_account username password game_name price description

–ü—Ä–∏–º–µ—Ä:
/add_account test_user pass123 "Counter-Strike 2" 50 "–ê–∫–∫–∞—É–Ω—Ç –¥–ª—è CS2"

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ username - –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ password - –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞  
‚Ä¢ game_name - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
‚Ä¢ price - —Ü–µ–Ω–∞ –∑–∞ —á–∞—Å (—Ä—É–±)
‚Ä¢ description - –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        """
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_accounts")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def admin_edit_accounts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        text = """
üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/edit_account account_id field value

–ü—Ä–∏–º–µ—Ä—ã:
/edit_account 1 price 75
/edit_account 1 description "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
/edit_account 1 game_name "Dota 2"

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:
‚Ä¢ price - —Ü–µ–Ω–∞ –∑–∞ —á–∞—Å
‚Ä¢ description - –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ game_name - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        """
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_accounts")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def admin_rentals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        try:
            active_rentals = self.db.get_active_rentals_list()
            
            if not active_rentals:
                text = "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –≤ —Å–∏—Å—Ç–µ–º–µ."
            else:
                text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:\n\n"
                
                for rental in active_rentals[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    end_time = datetime.fromisoformat(rental['end_time'])
                    remaining = end_time - datetime.now()
                    
                    if remaining.total_seconds() > 0:
                        hours = int(remaining.total_seconds() // 3600)
                        minutes = int((remaining.total_seconds() % 3600) // 60)
                        
                        text += f"üéÆ –ê–∫–∫–∞—É–Ω—Ç #{rental['account_id']}\n"
                        text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {rental['user_id']}\n"
                        text += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º\n"
                        text += f"üïê –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {end_time.strftime('%Y-%m-%d %H:%M')}\n\n"
                    else:
                        text += f"üéÆ –ê–∫–∫–∞—É–Ω—Ç #{rental['account_id']} - –ò—Å—Ç–µ–∫\n\n"
                
                if len(active_rentals) > 10:
                    text += f"... –∏ –µ—â–µ {len(active_rentals) - 10} –∞—Ä–µ–Ω–¥"
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä–µ–Ω–¥: {e}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_rentals")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def add_account_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_account"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            args = context.args
            
            if len(args) < 5:
                await update.message.reply_text("""
‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!

üìù –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
/add_account username password game_name price steam_token [description]

üìã –ü—Ä–∏–º–µ—Ä—ã:
/add_account test_user pass123 "Counter-Strike 2" 50 your_steam_api_key
/add_account cs2_acc password123 "CS2" 75 your_steam_api_key "–ê–∫–∫–∞—É–Ω—Ç —Å —Å–∫–∏–Ω–∞–º–∏"

üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ username - –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ password - –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞  
‚Ä¢ game_name - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
‚Ä¢ price - —Ü–µ–Ω–∞ –∑–∞ —á–∞—Å (—Ä—É–±)
‚Ä¢ steam_token - —Ç–æ–∫–µ–Ω Steam API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ description - –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

‚ö†Ô∏è –í–∞–∂–Ω–æ: Steam —Ç–æ–∫–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞!
                """)
                return
            
            username = args[0]
            password = args[1]
            game_name = args[2]
            price = float(args[3])
            steam_token = args[4]
            description = " ".join(args[5:]) if len(args) > 5 else ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Steam —Ç–æ–∫–µ–Ω
            if not steam_token or steam_token == "your_steam_api_key_here":
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π Steam API –∫–ª—é—á!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ Steam API
            steam_valid = self.verify_steam_account(username, password, steam_token)
            
            if not steam_valid:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ Steam API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Ç–æ–∫–µ–Ω.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = self.db.add_account(username, password, game_name, price, description)
            
            if success:
                await update.message.reply_text(f"""
‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!

üéÆ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:
üë§ –õ–æ–≥–∏–Ω: {username}
üìù –ò–≥—Ä–∞: {game_name}
üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±/—á–∞—Å
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚úÖ Steam API: –ü—Ä–æ–≤–µ—Ä–µ–Ω

üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {self.db.get_total_accounts()}
                """)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
    
    async def edit_account_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_account"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            args = context.args
            
            if len(args) < 3:
                await update.message.reply_text("""
‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!

üìù –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
/edit_account account_id field value

üìã –ü—Ä–∏–º–µ—Ä—ã:
/edit_account 1 price 75
/edit_account 1 description "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
/edit_account 1 game_name "Dota 2"

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:
‚Ä¢ price - —Ü–µ–Ω–∞ –∑–∞ —á–∞—Å
‚Ä¢ description - –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ game_name - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
                """)
                return
            
            account_id = int(args[0])
            field = args[1]
            value = " ".join(args[2:])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            account = self.db.get_account(account_id)
            if not account:
                await update.message.reply_text(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            allowed_fields = ['price', 'description', 'game_name']
            if field not in allowed_fields:
                await update.message.reply_text(f"‚ùå –ü–æ–ª–µ '{field}' –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {', '.join(allowed_fields)}")
                return
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
            if field == 'price':
                try:
                    value = float(value)
                except ValueError:
                    await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
            success = self.db.update_account(account_id, field, value)
            
            if success:
                await update.message.reply_text(f"""
‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!

üéÆ ID: {account_id}
üìù –ü–æ–ª–µ: {field}
üîÑ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}

üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
üë§ –õ–æ–≥–∏–Ω: {account['username']}
üìù –ò–≥—Ä–∞: {account['game_name'] if field != 'game_name' else value}
üí∞ –¶–µ–Ω–∞: {account['price'] if field != 'price' else value} —Ä—É–±/—á–∞—Å
                """)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
    
    async def set_token_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_token"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            args = context.args
            
            if len(args) < 2:
                await update.message.reply_text("""
‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!

üìù –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
/set_token token_type token_value

üìã –ü—Ä–∏–º–µ—Ä—ã:
/set_token FUNPAY_TOKEN your_funpay_token_here
/set_token STEAM_API_KEY your_steam_api_key_here

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–∫–µ–Ω–æ–≤:
‚Ä¢ FUNPAY_TOKEN - —Ç–æ–∫–µ–Ω –¥–ª—è FunPay
‚Ä¢ STEAM_API_KEY - –∫–ª—é—á API Steam
                """)
                return
            
            token_type = args[0].upper()
            token_value = " ".join(args[1:])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
            allowed_types = ['FUNPAY_TOKEN', 'STEAM_API_KEY']
            if token_type not in allowed_types:
                await update.message.reply_text(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞: {token_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(allowed_types)}")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            success = self.db.save_token(token_type, token_value)
            
            if success:
                await update.message.reply_text(f"""
‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!

üîë –¢–∏–ø: {token_type}
üîê –ó–Ω–∞—á–µ–Ω–∏–µ: {token_value[:20]}...
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üí° –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å {token_type.split('_')[0]}.
                """)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
    
    async def tokens_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tokens"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            funpay_token = self.db.get_token('FUNPAY_TOKEN')
            steam_token = self.db.get_token('STEAM_API_KEY')
            
            text = """
üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏

üìã –¢–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã:
            """
            
            if funpay_token:
                text += f"""
‚úÖ FUNPAY_TOKEN: {funpay_token[:20]}...
                """
            else:
                text += """
‚ùå FUNPAY_TOKEN: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                """
            
            if steam_token:
                text += f"""
‚úÖ STEAM_API_KEY: {steam_token[:20]}...
                """
            else:
                text += """
‚ùå STEAM_API_KEY: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                """
            
            text += """

üìù –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/set_token FUNPAY_TOKEN –≤–∞—à_—Ç–æ–∫–µ–Ω
/set_token STEAM_API_KEY –≤–∞—à_–∫–ª—é—á

‚ö†Ô∏è –í–∞–∂–Ω–æ: –¢–æ–∫–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FunPay –∏ Steam API.
            """
            
            keyboard = [
                [InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å FunPay", callback_data="setup_funpay_token")],
                [InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Steam", callback_data="setup_steam_token")],
                [InlineKeyboardButton("üìã –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tokens")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
    
    def verify_steam_account(self, username, password, steam_token):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Steam API"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Steam API
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            import requests
            
            # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ Steam API
            # steam_api_url = f"https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key={steam_token}&steamids={steam_id}"
            # response = requests.get(steam_api_url)
            
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
            if steam_token and steam_token != "your_steam_api_key_here":
                return True
            else:
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Steam –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return False
